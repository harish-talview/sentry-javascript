import type { Primitive } from './misc';
import type { HrTime } from './opentelemetry';
import type { SpanStatus } from './spanStatus';
import type { TransactionSource } from './transaction';

type SpanOriginType = 'manual' | 'auto';
type SpanOriginCategory = string; // e.g. http, db, ui, ....
type SpanOriginIntegrationName = string;
type SpanOriginIntegrationPart = string;
export type SpanOrigin =
  | SpanOriginType
  | `${SpanOriginType}.${SpanOriginCategory}`
  | `${SpanOriginType}.${SpanOriginCategory}.${SpanOriginIntegrationName}`
  | `${SpanOriginType}.${SpanOriginCategory}.${SpanOriginIntegrationName}.${SpanOriginIntegrationPart}`;

// These types are aligned with OpenTelemetry Span Attributes
export type SpanAttributeValue =
  | string
  | number
  | boolean
  | Array<null | undefined | string>
  | Array<null | undefined | number>
  | Array<null | undefined | boolean>;

export type SpanAttributes = Partial<{
  'sentry.origin': string;
  'sentry.op': string;
  'sentry.source': TransactionSource;
  'sentry.sample_rate': number;
}> &
  Record<string, SpanAttributeValue | undefined>;

export type MetricSummary = {
  min: number;
  max: number;
  count: number;
  sum: number;
  tags?: Record<string, Primitive> | undefined;
};

/** This type is aligned with the OpenTelemetry TimeInput type. */
export type SpanTimeInput = HrTime | number | Date;

/** A JSON representation of a span. */
export interface SpanJSON {
  data?: { [key: string]: any };
  description?: string;
  op?: string;
  parent_span_id?: string;
  span_id: string;
  start_timestamp: number;
  status?: string;
  tags?: { [key: string]: Primitive };
  timestamp?: number;
  trace_id: string;
  origin?: SpanOrigin;
  _metrics_summary?: Record<string, Array<MetricSummary>>;
}

// These are aligned with OpenTelemetry trace flags
type TraceFlagNone = 0;
type TraceFlagSampled = 1;
export type TraceFlag = TraceFlagNone | TraceFlagSampled;

export interface SpanContextData {
  /**
   * The ID of the trace that this span belongs to. It is worldwide unique
   * with practically sufficient probability by being made as 16 randomly
   * generated bytes, encoded as a 32 lowercase hex characters corresponding to
   * 128 bits.
   */
  traceId: string;

  /**
   * The ID of the Span. It is globally unique with practically sufficient
   * probability by being made as 8 randomly generated bytes, encoded as a 16
   * lowercase hex characters corresponding to 64 bits.
   */
  spanId: string;

  /**
   * Only true if the SpanContext was propagated from a remote parent.
   */
  isRemote?: boolean;

  /**
   * Trace flags to propagate.
   *
   * It is represented as 1 byte (bitmap). Bit to represent whether trace is
   * sampled or not. When set, the least significant bit documents that the
   * caller may have recorded trace data. A caller who does not record trace
   * data out-of-band leaves this flag unset.
   * We allow number here because otel also does, so we can't be stricter than them.
   */
  traceFlags: TraceFlag | number;

  // Note: we do not have traceState here, but this is optional in OpenTelemetry anyhow
}

/**
 * Interface holding all properties that can be set on a Span on creation.
 * This is only used for the legacy span/transaction creation and will go away in v8.
 */
export interface SpanContext {
  /**
   * Human-readable identifier for the span.
   */
  name?: string | undefined;

  /**
   * Operation of the Span.
   */
  op?: string | undefined;

  /**
   * Parent Span ID
   */
  parentSpanId?: string | undefined;

  /**
   * Was this span chosen to be sent as part of the sample?
   */
  sampled?: boolean | undefined;

  /**
   * Span ID
   */
  spanId?: string | undefined;

  /**
   * Trace ID
   */
  traceId?: string | undefined;

  /**
   * Tags of the Span.
   * @deprecated Pass `attributes` instead.
   */
  tags?: { [key: string]: Primitive };

  /**
   * Data of the Span.
   * @deprecated Pass `attributes` instead.
   */
  data?: { [key: string]: any };

  /**
   * Attributes of the Span.
   */
  attributes?: SpanAttributes;

  /**
   * Timestamp in seconds (epoch time) indicating when the span started.
   */
  startTimestamp?: number | undefined;

  /**
   * Timestamp in seconds (epoch time) indicating when the span ended.
   */
  endTimestamp?: number | undefined;

  /**
   * The origin of the span, giving context about what created the span.
   */
  origin?: SpanOrigin | undefined;
}

/**
 * A generic Span which holds trace data.
 */
export interface Span {
  /**
   * Get context data for this span.
   * This includes the spanId & the traceId.
   */
  spanContext(): SpanContextData;

  /**
   * End the current span.
   */
  end(endTimestamp?: SpanTimeInput): void;

  /**
   * Set a single attribute on the span.
   * Set it to `undefined` to remove the attribute.
   */
  setAttribute(key: string, value: SpanAttributeValue | undefined): void;

  /**
   * Set multiple attributes on the span.
   * Any attribute set to `undefined` will be removed.
   */
  setAttributes(attributes: SpanAttributes): void;

  /**
   * Sets the status attribute on the current span.
   */
  setStatus(status: SpanStatus): this;

  /**
   * Update the name of the span.
   */
  updateName(name: string): this;

  /**
   * If this is span is actually recording data.
   * This will return false if tracing is disabled, this span was not sampled or if the span is already finished.
   */
  isRecording(): boolean;
}
